
SignalEditorAVR128DB28.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00804000  00000866  000008fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00804004  00804004  000008fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002939  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024ab  00000000  00000000  00003311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057d  00000000  00000000  000057bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00005d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000154c  00000000  00000000  00005e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a5  00000000  00000000  0000739c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00007641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	df e7       	ldi	r29, 0x7F	; 127
  b2:	de bf       	out	0x3e, r29	; 62

000000b4 <__do_copy_data>:
  b4:	10 e4       	ldi	r17, 0x40	; 64
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e4       	ldi	r27, 0x40	; 64
  ba:	e6 e6       	ldi	r30, 0x66	; 102
  bc:	f8 e0       	ldi	r31, 0x08	; 8
  be:	00 e0       	ldi	r16, 0x00	; 0
  c0:	0b bf       	out	0x3b, r16	; 59
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x14>
  c4:	07 90       	elpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 30       	cpi	r26, 0x04	; 4
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0x10>

000000ce <__do_clear_bss>:
  ce:	20 e4       	ldi	r18, 0x40	; 64
  d0:	a4 e0       	ldi	r26, 0x04	; 4
  d2:	b0 e4       	ldi	r27, 0x40	; 64
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	ac 31       	cpi	r26, 0x1C	; 28
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 44 02 	call	0x488	; 0x488 <main>
  e2:	0c 94 31 04 	jmp	0x862	; 0x862 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z7DacInitv>:
*
*/
void DacInit()
{
	//Select the VREF for the DAC
	VREF_DAC0REF = (1 << VREF_ALWAYSON_bp | 2);
  ea:	82 e8       	ldi	r24, 0x82	; 130
  ec:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//Enable our DAC output
	DAC0_CTRLA |= (1 << DAC_OUTEN_bp);
  f0:	e0 ea       	ldi	r30, 0xA0	; 160
  f2:	f6 e0       	ldi	r31, 0x06	; 6
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	80 83       	st	Z, r24
	
	//Make sure to clear our DAC data on startup
	DAC0.DATA = 0;
  fa:	12 82       	std	Z+2, r1	; 0x02
  fc:	13 82       	std	Z+3, r1	; 0x03
	
	//Enable our DAC
	DAC0_CTRLA |= (1 << DAC_ENABLE_bp);
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <_Z7AdcInith>:
*
*/
void AdcInit(uint8_t adcPinMask)
{
	//Configure the VREF for the ADC
	VREF_ADC0REF |= (1 << VREF_ALWAYSON_bp | 2);
 106:	e0 eb       	ldi	r30, 0xB0	; 176
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	90 81       	ld	r25, Z
 10c:	92 68       	ori	r25, 0x82	; 130
 10e:	90 83       	st	Z, r25
	
	//Select pins to be enabled as ADC input
	ADC_DIR_REG &= ~(adcPinMask);
 110:	9c b1       	in	r25, 0x0c	; 12
 112:	80 95       	com	r24
 114:	98 23       	and	r25, r24
 116:	9c b9       	out	0x0c, r25	; 12
	
	//Make sure results are right justified
	ADC0_CTRLA &= ~(1 << ADC_LEFTADJ_bp);
 118:	e0 e0       	ldi	r30, 0x00	; 0
 11a:	f6 e0       	ldi	r31, 0x06	; 6
 11c:	80 81       	ld	r24, Z
 11e:	8f 7e       	andi	r24, 0xEF	; 239
 120:	80 83       	st	Z, r24
	
	//Make sure we're in free running mode
	ADC0_CTRLA |= (1 << ADC_FREERUN_bp);
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
	
	//Enable ADC
	ADC0_CTRLA |= (1 << ADC_ENABLE_bp);
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <_Z9TimerInitv>:
*/
void TimerInit()
{
	
	//Set our timer period
	TCA0_SINGLE_PER = 0xffff - dacStepSize;
 130:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 134:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 138:	80 95       	com	r24
 13a:	90 95       	com	r25
 13c:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 140:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
	
	//Set our timers prescaler
	TCA0_SINGLE_CTRLA = (currentPrescaler << TCA_SINGLE_CLKSEL_0_bp);
 144:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <currentPrescaler>
 148:	88 0f       	add	r24, r24
 14a:	e0 e0       	ldi	r30, 0x00	; 0
 14c:	fa e0       	ldi	r31, 0x0A	; 10
 14e:	80 83       	st	Z, r24
	
	//Enable timer 0 overflow interrupt
	TCA0_SINGLE_INTCTRL |= (1 << 0);
 150:	aa e0       	ldi	r26, 0x0A	; 10
 152:	ba e0       	ldi	r27, 0x0A	; 10
 154:	8c 91       	ld	r24, X
 156:	81 60       	ori	r24, 0x01	; 1
 158:	8c 93       	st	X, r24
	
	//Start our timer
	TCA0_SINGLE_CTRLA |= (1 << TCA_SINGLE_ENABLE_bp);
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
	
	//Make sure global interrupts are on
	sei();
 160:	78 94       	sei
 162:	08 95       	ret

00000164 <_Z7SysInitv>:
*
*/
void SysInit()
{
	//Initialize external crystal
	CLKCTRL_XOSCHFCTRLA |= (CLKCTRL_FRQRANGE_24M_gc);
 164:	e0 e8       	ldi	r30, 0x80	; 128
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 83       	st	Z, r24
	CLKCTRL_XOSCHFCTRLA |= CLKCTRL_ENABLE_bm;
 16e:	80 81       	ld	r24, Z
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 83       	st	Z, r24
	
	//Select external crystal as the main clock
	CLKCTRL_MCLKCTRLA |= CLKCTRL_CLKSEL_EXTCLK_gc;
 174:	e0 e6       	ldi	r30, 0x60	; 96
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	83 60       	ori	r24, 0x03	; 3
 17c:	80 83       	st	Z, r24
	
	//Make sure clock set to appropriate speed
	CLKCTRL_OSCHFCTRLA |= CLKCTRL_FRQSEL_24M_gc;
 17e:	e8 e6       	ldi	r30, 0x68	; 104
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	84 62       	ori	r24, 0x24	; 36
 186:	80 83       	st	Z, r24
	
	//Setup default pin settings
	VPORTA_OUT = 0x00;
 188:	11 b8       	out	0x01, r1	; 1
	VPORTC_OUT = 0x00;
 18a:	19 b8       	out	0x09, r1	; 9
	VPORTD_OUT = 0x00;
 18c:	1d b8       	out	0x0d, r1	; 13
	VPORTF_OUT = 0x00;
 18e:	15 ba       	out	0x15, r1	; 21
	
	VPORTA_DIR = 0xff;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	80 b9       	out	0x00, r24	; 0
	VPORTC_DIR = 0xff;
 194:	88 b9       	out	0x08, r24	; 8
	VPORTD_DIR = 0xff;
 196:	8c b9       	out	0x0c, r24	; 12
	VPORTF_DIR = 0xff;
 198:	84 bb       	out	0x14, r24	; 20
	
	
	//Initialize our DAC
	DacInit();
 19a:	0e 94 75 00 	call	0xea	; 0xea <_Z7DacInitv>
	
	//Initialize our ADC
	AdcInit(ADC_PIN_MASK);
 19e:	8e eb       	ldi	r24, 0xBE	; 190
 1a0:	0e 94 83 00 	call	0x106	; 0x106 <_Z7AdcInith>
	
	//Setup timer
	TimerInit();
 1a4:	0e 94 98 00 	call	0x130	; 0x130 <_Z9TimerInitv>
 1a8:	08 95       	ret

000001aa <_Z9NextPhasehb>:
	//Variables
	static bool countingBack; //If we're counting backwards or not
	static uint8_t countsPerStep; //The counts per step
	
	//If we can go to the next phase...
	if(++countsPerStep > countsPerPhase)
 1aa:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <_ZZ9NextPhasehbE13countsPerStep>
 1ae:	9f 5f       	subi	r25, 0xFF	; 255
 1b0:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <_ZZ9NextPhasehbE13countsPerStep>
 1b4:	89 17       	cp	r24, r25
 1b6:	70 f5       	brcc	.+92     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
	{
		//Reset the counts
		countsPerStep = 0;
 1b8:	10 92 06 40 	sts	0x4006, r1	; 0x804006 <_ZZ9NextPhasehbE13countsPerStep>
		
		//If we're reversing the counts...
		if(reverseCounts)
 1bc:	66 23       	and	r22, r22
 1be:	09 f1       	breq	.+66     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		{
			//If we're counting down...
			if(countingBack)
 1c0:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <_ZZ9NextPhasehbE12countingBack>
 1c4:	88 23       	and	r24, r24
 1c6:	71 f0       	breq	.+28     	; 0x1e4 <_Z9NextPhasehb+0x3a>
			{
				//If the next phase is out of range...
				if(currentDacPhase <= 0)
 1c8:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 1cc:	81 11       	cpse	r24, r1
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <_Z9NextPhasehb+0x32>
				{
					//Set the current phase
					currentDacPhase = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL15currentDacPhase>
					
					//Toggle the state
					countingBack = false;
 1d6:	10 92 05 40 	sts	0x4005, r1	; 0x804005 <_ZZ9NextPhasehbE12countingBack>
 1da:	08 95       	ret
				}
				//else...
				else
				{
					//Decrement
					currentDacPhase--;
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL15currentDacPhase>
 1e2:	08 95       	ret
				}
			}
			else
			{
				//If the next phase is out of range...
				if(currentDacPhase >= dacPhaseCount - 1)
 1e4:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 1e8:	8f 30       	cpi	r24, 0x0F	; 15
 1ea:	38 f0       	brcs	.+14     	; 0x1fa <_Z9NextPhasehb+0x50>
				{
					//Set the current phase
					currentDacPhase = dacPhaseCount - 2;
 1ec:	8e e0       	ldi	r24, 0x0E	; 14
 1ee:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL15currentDacPhase>
					
					//Toggle the state
					countingBack = true;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <_ZZ9NextPhasehbE12countingBack>
 1f8:	08 95       	ret
				}
				//else...
				else
				{
					//Increment
					currentDacPhase++;
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL15currentDacPhase>
 200:	08 95       	ret
			
		}
		else
		{
			//If the next phase is out of range...
			if(++currentDacPhase >= dacPhaseCount)
 202:	80 91 09 40 	lds	r24, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 09 40 	sts	0x4009, r24	; 0x804009 <_ZL15currentDacPhase>
 20c:	80 31       	cpi	r24, 0x10	; 16
 20e:	10 f0       	brcs	.+4      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
			{
				//Set the current phase
				currentDacPhase = 0;
 210:	10 92 09 40 	sts	0x4009, r1	; 0x804009 <_ZL15currentDacPhase>
 214:	08 95       	ret

00000216 <_Z8WriteDacv>:
{
	//Variables
	static bool countingDown; //If we're currently in the counting down phase
	
	//Set our DAC data
	DAC0_DATA = (currentDacValue << 6);
 216:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL15currentDacValue>
 21a:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <_ZL15currentDacValue+0x1>
 21e:	00 24       	eor	r0, r0
 220:	96 95       	lsr	r25
 222:	87 95       	ror	r24
 224:	07 94       	ror	r0
 226:	96 95       	lsr	r25
 228:	87 95       	ror	r24
 22a:	07 94       	ror	r0
 22c:	98 2f       	mov	r25, r24
 22e:	80 2d       	mov	r24, r0
 230:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7e06a2>
 234:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <__TEXT_REGION_LENGTH__+0x7e06a3>
	
	//If we are counting down...
	if(countingDown)
 238:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <__data_end>
 23c:	88 23       	and	r24, r24
 23e:	e1 f1       	breq	.+120    	; 0x2b8 <_Z8WriteDacv+0xa2>
	{
		//If we can count down even more...
		if(currentDacValue > (dacPhases[currentDacPhase]) && currentDacValue >= dacStepSize)
 240:	e0 91 09 40 	lds	r30, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	e4 5f       	subi	r30, 0xF4	; 244
 24c:	ff 4b       	sbci	r31, 0xBF	; 191
 24e:	20 81       	ld	r18, Z
 250:	31 81       	ldd	r19, Z+1	; 0x01
 252:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL15currentDacValue>
 256:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <_ZL15currentDacValue+0x1>
 25a:	28 17       	cp	r18, r24
 25c:	39 07       	cpc	r19, r25
 25e:	70 f4       	brcc	.+28     	; 0x27c <_Z8WriteDacv+0x66>
 260:	40 91 00 40 	lds	r20, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 264:	50 91 01 40 	lds	r21, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 268:	84 17       	cp	r24, r20
 26a:	95 07       	cpc	r25, r21
 26c:	38 f0       	brcs	.+14     	; 0x27c <_Z8WriteDacv+0x66>
		{
			//Count down
			currentDacValue -= dacStepSize;
 26e:	84 1b       	sub	r24, r20
 270:	95 0b       	sbc	r25, r21
 272:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL15currentDacValue>
 276:	90 93 0b 40 	sts	0x400B, r25	; 0x80400b <_ZL15currentDacValue+0x1>
 27a:	08 95       	ret
		}
		else
		{
			//Set the current DAC value
			currentDacValue = dacPhases[currentDacPhase];
 27c:	20 93 0a 40 	sts	0x400A, r18	; 0x80400a <_ZL15currentDacValue>
 280:	30 93 0b 40 	sts	0x400B, r19	; 0x80400b <_ZL15currentDacValue+0x1>
			
			//Move to the next phase
			NextPhase(0,mirrorSlope);
 284:	60 91 07 40 	lds	r22, 0x4007	; 0x804007 <mirrorSlope>
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9NextPhasehb>
			
			//Set the current state
			countingDown = (currentDacValue > dacPhases[currentDacPhase]) ? true : false;
 28e:	e0 91 09 40 	lds	r30, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	e4 5f       	subi	r30, 0xF4	; 244
 29a:	ff 4b       	sbci	r31, 0xBF	; 191
 29c:	40 81       	ld	r20, Z
 29e:	51 81       	ldd	r21, Z+1	; 0x01
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	20 91 0a 40 	lds	r18, 0x400A	; 0x80400a <_ZL15currentDacValue>
 2a6:	30 91 0b 40 	lds	r19, 0x400B	; 0x80400b <_ZL15currentDacValue+0x1>
 2aa:	42 17       	cp	r20, r18
 2ac:	53 07       	cpc	r21, r19
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <_Z8WriteDacv+0x9c>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <__data_end>
 2b6:	08 95       	ret
	}
	//else...
	else
	{
		//If we can count up more...
		if(currentDacValue < (dacPhases[currentDacPhase]) && currentDacValue < (1023 - dacStepSize) )
 2b8:	e0 91 09 40 	lds	r30, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ee 0f       	add	r30, r30
 2c0:	ff 1f       	adc	r31, r31
 2c2:	e4 5f       	subi	r30, 0xF4	; 244
 2c4:	ff 4b       	sbci	r31, 0xBF	; 191
 2c6:	40 81       	ld	r20, Z
 2c8:	51 81       	ldd	r21, Z+1	; 0x01
 2ca:	80 91 0a 40 	lds	r24, 0x400A	; 0x80400a <_ZL15currentDacValue>
 2ce:	90 91 0b 40 	lds	r25, 0x400B	; 0x80400b <_ZL15currentDacValue+0x1>
 2d2:	84 17       	cp	r24, r20
 2d4:	95 07       	cpc	r25, r21
 2d6:	90 f4       	brcc	.+36     	; 0x2fc <_Z8WriteDacv+0xe6>
 2d8:	60 91 00 40 	lds	r22, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2dc:	70 91 01 40 	lds	r23, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	33 e0       	ldi	r19, 0x03	; 3
 2e4:	26 1b       	sub	r18, r22
 2e6:	37 0b       	sbc	r19, r23
 2e8:	82 17       	cp	r24, r18
 2ea:	93 07       	cpc	r25, r19
 2ec:	38 f4       	brcc	.+14     	; 0x2fc <_Z8WriteDacv+0xe6>
		{
			currentDacValue += dacStepSize;
 2ee:	86 0f       	add	r24, r22
 2f0:	97 1f       	adc	r25, r23
 2f2:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <_ZL15currentDacValue>
 2f6:	90 93 0b 40 	sts	0x400B, r25	; 0x80400b <_ZL15currentDacValue+0x1>
 2fa:	08 95       	ret
		}
		else
		{
			//Set the current DAC value
			currentDacValue = dacPhases[currentDacPhase];
 2fc:	40 93 0a 40 	sts	0x400A, r20	; 0x80400a <_ZL15currentDacValue>
 300:	50 93 0b 40 	sts	0x400B, r21	; 0x80400b <_ZL15currentDacValue+0x1>
			
			//Move to the next phase
			NextPhase(0,mirrorSlope);
 304:	60 91 07 40 	lds	r22, 0x4007	; 0x804007 <mirrorSlope>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z9NextPhasehb>
			
			//Set the current state
			countingDown = (currentDacValue > dacPhases[currentDacPhase]) ? true : false;
 30e:	e0 91 09 40 	lds	r30, 0x4009	; 0x804009 <_ZL15currentDacPhase>
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	e4 5f       	subi	r30, 0xF4	; 244
 31a:	ff 4b       	sbci	r31, 0xBF	; 191
 31c:	40 81       	ld	r20, Z
 31e:	51 81       	ldd	r21, Z+1	; 0x01
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	20 91 0a 40 	lds	r18, 0x400A	; 0x80400a <_ZL15currentDacValue>
 326:	30 91 0b 40 	lds	r19, 0x400B	; 0x80400b <_ZL15currentDacValue+0x1>
 32a:	42 17       	cp	r20, r18
 32c:	53 07       	cpc	r21, r19
 32e:	08 f0       	brcs	.+2      	; 0x332 <_Z8WriteDacv+0x11c>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <__data_end>
 336:	08 95       	ret

00000338 <__vector_9>:
/**
* \brief Timer counter overflow interrupt
*
*/
ISR(TCA0_OVF_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	0b b6       	in	r0, 0x3b	; 59
 344:	0f 92       	push	r0
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
	//Stop our timer
	TCA0_SINGLE_CTRLA &= ~(1 << TCA_SINGLE_ENABLE_bp);
 362:	c0 e0       	ldi	r28, 0x00	; 0
 364:	da e0       	ldi	r29, 0x0A	; 10
 366:	88 81       	ld	r24, Y
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	88 83       	st	Y, r24
	
	//Clear the timer overflow flag
	TCA0_SINGLE_INTFLAGS |= (1 << TCA_SINGLE_OVF_bp);
 36c:	eb e0       	ldi	r30, 0x0B	; 11
 36e:	fa e0       	ldi	r31, 0x0A	; 10
 370:	80 81       	ld	r24, Z
 372:	81 60       	ori	r24, 0x01	; 1
 374:	80 83       	st	Z, r24
	
	//Write our dac value
	WriteDac();
 376:	0e 94 0b 01 	call	0x216	; 0x216 <_Z8WriteDacv>
	
	//Set our timer period
	TCA0_SINGLE_PER = 0xFFFF - dacStepTime;
 37a:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <dacStepTime>
 37e:	90 91 03 40 	lds	r25, 0x4003	; 0x804003 <dacStepTime+0x1>
 382:	80 95       	com	r24
 384:	90 95       	com	r25
 386:	80 93 26 0a 	sts	0x0A26, r24	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7e0a26>
 38a:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7e0a27>
	
	//Set our timers prescaler
	TCA0_SINGLE_CTRLA = (currentPrescaler << TCA_SINGLE_CLKSEL_0_bp);
 38e:	80 91 08 40 	lds	r24, 0x4008	; 0x804008 <currentPrescaler>
 392:	88 0f       	add	r24, r24
 394:	88 83       	st	Y, r24
	
	//Restart our timer
	TCA0_SINGLE_CTRLA |= (1 << TCA_SINGLE_ENABLE_bp);
 396:	88 81       	ld	r24, Y
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	88 83       	st	Y, r24
	
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0b be       	out	0x3b, r0	; 59
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <_Z9SampleAdchh>:
/**
* \brief Samples ADC for sampleCount Counts on channel adcChannel, returning the average
*
*/
uint16_t SampleAdc(uint8_t adcChannel, uint8_t sampleCount)
{
 3c6:	38 2f       	mov	r19, r24
	//Variables
	uint16_t adcResult = 0; //Return value from the ADC
	
	//If the sample count is greater than 0, avoid divide by 0 errors,...
	if(sampleCount > 0)
 3c8:	66 23       	and	r22, r22
 3ca:	31 f1       	breq	.+76     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	{
		//Create a variable for the loop
		uint8_t i = 0;

		//Select the passed channel
		ADC0_MUXPOS |= adcChannel;
 3cc:	e8 e0       	ldi	r30, 0x08	; 8
 3ce:	f6 e0       	ldi	r31, 0x06	; 6
 3d0:	80 81       	ld	r24, Z
 3d2:	83 2b       	or	r24, r19
 3d4:	80 83       	st	Z, r24
	
	//If the sample count is greater than 0, avoid divide by 0 errors,...
	if(sampleCount > 0)
	{
		//Create a variable for the loop
		uint8_t i = 0;
 3d6:	20 e0       	ldi	r18, 0x00	; 0
*
*/
uint16_t SampleAdc(uint8_t adcChannel, uint8_t sampleCount)
{
	//Variables
	uint16_t adcResult = 0; //Return value from the ADC
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	50 e0       	ldi	r21, 0x00	; 0

		//Select the passed channel
		ADC0_MUXPOS |= adcChannel;

		//While the index is less than the passed sample count...
		while(i < sampleCount)
 3dc:	26 17       	cp	r18, r22
 3de:	88 f4       	brcc	.+34     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		{
			i++;
 3e0:	2f 5f       	subi	r18, 0xFF	; 255

			//Start our conversion
			ADC0_COMMAND |= (1 << ADC_STCONV_bp);
 3e2:	ea e0       	ldi	r30, 0x0A	; 10
 3e4:	f6 e0       	ldi	r31, 0x06	; 6
 3e6:	90 81       	ld	r25, Z
 3e8:	91 60       	ori	r25, 0x01	; 1
 3ea:	90 83       	st	Z, r25
			
			//Wait until the conversion is finished
			while( !((ADC0_INTFLAGS >> ADC_RESRDY_bp) & 0x01));
 3ec:	90 91 0d 06 	lds	r25, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
 3f0:	90 ff       	sbrs	r25, 0
 3f2:	fc cf       	rjmp	.-8      	; 0x3ec <_Z9SampleAdchh+0x26>
			
			//Add our result
			adcResult += ADC0_RES;
 3f4:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 3f8:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
 3fc:	48 0f       	add	r20, r24
 3fe:	59 1f       	adc	r21, r25

		//Select the passed channel
		ADC0_MUXPOS |= adcChannel;

		//While the index is less than the passed sample count...
		while(i < sampleCount)
 400:	ed cf       	rjmp	.-38     	; 0x3dc <_Z9SampleAdchh+0x16>
			//Add our result
			adcResult += ADC0_RES;
		}
		
		//Divide our result by the passed sample count
		adcResult /= sampleCount;
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	ca 01       	movw	r24, r20
 406:	0e 94 1d 04 	call	0x83a	; 0x83a <__udivmodhi4>

		//Make sure the clear the selected channel on the way out
		ADC0_MUXPOS &= ~adcChannel;
 40a:	e8 e0       	ldi	r30, 0x08	; 8
 40c:	f6 e0       	ldi	r31, 0x06	; 6
 40e:	90 81       	ld	r25, Z
 410:	30 95       	com	r19
 412:	39 23       	and	r19, r25
 414:	30 83       	st	Z, r19
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
*
*/
uint16_t SampleAdc(uint8_t adcChannel, uint8_t sampleCount)
{
	//Variables
	uint16_t adcResult = 0; //Return value from the ADC
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0

	}
	
	//Return our result
	return adcResult;
}
 41c:	cb 01       	movw	r24, r22
 41e:	08 95       	ret

00000420 <_Z7ReadMuxv>:
/**
* \brief Reads the external ADC multiplexer
*
*/
void ReadMux()
{
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
	
	//Loop through each of the ADC mux channels and...
	for(uint8_t i = 0; i < dacPhaseCount; i++)
 426:	10 e0       	ldi	r17, 0x00	; 0
 428:	10 31       	cpi	r17, 0x10	; 16
 42a:	50 f5       	brcc	.+84     	; 0x480 <_Z7ReadMuxv+0x60>
	{
		//Clear the mux pins
		ADC_MUX_OUT &= ~(ADC_MUX_PIN_MASK);
 42c:	89 b1       	in	r24, 0x09	; 9
 42e:	88 7f       	andi	r24, 0xF8	; 248
 430:	89 b9       	out	0x09, r24	; 9
		
		//Select the current adc mux channel
		ADC_MUX_OUT |= (i << ADC_MUX_LSB);
 432:	89 b1       	in	r24, 0x09	; 9
 434:	81 2b       	or	r24, r17
 436:	89 b9       	out	0x09, r24	; 9
		
		//Read the ADC into the saved DAC register after converting it into the correct range
		dacPhases[i] = (uint16_t)(((float)SampleAdc(ADC_MUX_ADC, 12) / (float)ADC_RESOLUTION) * 1023.0f);
 438:	c1 2f       	mov	r28, r17
 43a:	d0 e0       	ldi	r29, 0x00	; 0
 43c:	6c e0       	ldi	r22, 0x0C	; 12
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z9SampleAdchh>
 444:	bc 01       	movw	r22, r24
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 22 03 	call	0x644	; 0x644 <__floatunsisf>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 ef       	ldi	r19, 0xF0	; 240
 452:	4f e7       	ldi	r20, 0x7F	; 127
 454:	55 e4       	ldi	r21, 0x45	; 69
 456:	0e 94 81 02 	call	0x502	; 0x502 <__divsf3>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 ec       	ldi	r19, 0xC0	; 192
 45e:	4f e7       	ldi	r20, 0x7F	; 127
 460:	54 e4       	ldi	r21, 0x44	; 68
 462:	0e 94 b0 03 	call	0x760	; 0x760 <__mulsf3>
 466:	cc 0f       	add	r28, r28
 468:	dd 1f       	adc	r29, r29
 46a:	c4 5f       	subi	r28, 0xF4	; 244
 46c:	df 4b       	sbci	r29, 0xBF	; 191
 46e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fixunssfsi>
 472:	68 83       	st	Y, r22
 474:	79 83       	std	Y+1, r23	; 0x01
		
		//Short delay for processing
		while(0);
		
		//Clear the mux pins
		ADC_MUX_OUT &= ~(ADC_MUX_PIN_MASK);
 476:	89 b1       	in	r24, 0x09	; 9
 478:	88 7f       	andi	r24, 0xF8	; 248
 47a:	89 b9       	out	0x09, r24	; 9
*/
void ReadMux()
{
	
	//Loop through each of the ADC mux channels and...
	for(uint8_t i = 0; i < dacPhaseCount; i++)
 47c:	1f 5f       	subi	r17, 0xFF	; 255
 47e:	d4 cf       	rjmp	.-88     	; 0x428 <_Z7ReadMuxv+0x8>
		
		//Clear the mux pins
		ADC_MUX_OUT &= ~(ADC_MUX_PIN_MASK);
	}

 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	08 95       	ret

00000488 <main>:
*
*/
int main(void)
{
	//Initialize the controller
	SysInit();
 488:	0e 94 b2 00 	call	0x164	; 0x164 <_Z7SysInitv>
	
	while (1)
	{
		//Read our mux values
		ReadMux();
 48c:	0e 94 10 02 	call	0x420	; 0x420 <_Z7ReadMuxv>
		
		//Get our step time
		dacStepTime = (uint16_t)(((float)SampleAdc(ADC_TIMING_READ,12) / (float)ADC_RESOLUTION) * (float)(0xEDFE)) + 1200;
 490:	6c e0       	ldi	r22, 0x0C	; 12
 492:	84 e0       	ldi	r24, 0x04	; 4
 494:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z9SampleAdchh>
 498:	bc 01       	movw	r22, r24
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 22 03 	call	0x644	; 0x644 <__floatunsisf>
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 ef       	ldi	r19, 0xF0	; 240
 4a6:	4f e7       	ldi	r20, 0x7F	; 127
 4a8:	55 e4       	ldi	r21, 0x45	; 69
 4aa:	0e 94 81 02 	call	0x502	; 0x502 <__divsf3>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	3e ef       	ldi	r19, 0xFE	; 254
 4b2:	4d e6       	ldi	r20, 0x6D	; 109
 4b4:	57 e4       	ldi	r21, 0x47	; 71
 4b6:	0e 94 b0 03 	call	0x760	; 0x760 <__mulsf3>
 4ba:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fixunssfsi>
 4be:	60 55       	subi	r22, 0x50	; 80
 4c0:	7b 4f       	sbci	r23, 0xFB	; 251
 4c2:	60 93 02 40 	sts	0x4002, r22	; 0x804002 <dacStepTime>
 4c6:	70 93 03 40 	sts	0x4003, r23	; 0x804003 <dacStepTime+0x1>
		
		//Get our step size
		dacStepSize = (uint16_t)(((float)SampleAdc(ADC_STEP_READ,12) / (float)ADC_RESOLUTION) * (float)(0x3FF));
 4ca:	6c e0       	ldi	r22, 0x0C	; 12
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z9SampleAdchh>
 4d2:	bc 01       	movw	r22, r24
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 22 03 	call	0x644	; 0x644 <__floatunsisf>
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 ef       	ldi	r19, 0xF0	; 240
 4e0:	4f e7       	ldi	r20, 0x7F	; 127
 4e2:	55 e4       	ldi	r21, 0x45	; 69
 4e4:	0e 94 81 02 	call	0x502	; 0x502 <__divsf3>
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 ec       	ldi	r19, 0xC0	; 192
 4ec:	4f e7       	ldi	r20, 0x7F	; 127
 4ee:	54 e4       	ldi	r21, 0x44	; 68
 4f0:	0e 94 b0 03 	call	0x760	; 0x760 <__mulsf3>
 4f4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fixunssfsi>
 4f8:	60 93 00 40 	sts	0x4000, r22	; 0x804000 <__DATA_REGION_ORIGIN__>
 4fc:	70 93 01 40 	sts	0x4001, r23	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 500:	c5 cf       	rjmp	.-118    	; 0x48c <main+0x4>

00000502 <__divsf3>:
 502:	0e 94 95 02 	call	0x52a	; 0x52a <__divsf3x>
 506:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_round>
 50a:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_pscB>
 50e:	58 f0       	brcs	.+22     	; 0x526 <__divsf3+0x24>
 510:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_pscA>
 514:	40 f0       	brcs	.+16     	; 0x526 <__divsf3+0x24>
 516:	29 f4       	brne	.+10     	; 0x522 <__divsf3+0x20>
 518:	5f 3f       	cpi	r21, 0xFF	; 255
 51a:	29 f0       	breq	.+10     	; 0x526 <__divsf3+0x24>
 51c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_inf>
 520:	51 11       	cpse	r21, r1
 522:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_szero>
 526:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_nan>

0000052a <__divsf3x>:
 52a:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_split3>
 52e:	68 f3       	brcs	.-38     	; 0x50a <__divsf3+0x8>

00000530 <__divsf3_pse>:
 530:	99 23       	and	r25, r25
 532:	b1 f3       	breq	.-20     	; 0x520 <__divsf3+0x1e>
 534:	55 23       	and	r21, r21
 536:	91 f3       	breq	.-28     	; 0x51c <__divsf3+0x1a>
 538:	95 1b       	sub	r25, r21
 53a:	55 0b       	sbc	r21, r21
 53c:	bb 27       	eor	r27, r27
 53e:	aa 27       	eor	r26, r26
 540:	62 17       	cp	r22, r18
 542:	73 07       	cpc	r23, r19
 544:	84 07       	cpc	r24, r20
 546:	38 f0       	brcs	.+14     	; 0x556 <__divsf3_pse+0x26>
 548:	9f 5f       	subi	r25, 0xFF	; 255
 54a:	5f 4f       	sbci	r21, 0xFF	; 255
 54c:	22 0f       	add	r18, r18
 54e:	33 1f       	adc	r19, r19
 550:	44 1f       	adc	r20, r20
 552:	aa 1f       	adc	r26, r26
 554:	a9 f3       	breq	.-22     	; 0x540 <__divsf3_pse+0x10>
 556:	35 d0       	rcall	.+106    	; 0x5c2 <__divsf3_pse+0x92>
 558:	0e 2e       	mov	r0, r30
 55a:	3a f0       	brmi	.+14     	; 0x56a <__divsf3_pse+0x3a>
 55c:	e0 e8       	ldi	r30, 0x80	; 128
 55e:	32 d0       	rcall	.+100    	; 0x5c4 <__divsf3_pse+0x94>
 560:	91 50       	subi	r25, 0x01	; 1
 562:	50 40       	sbci	r21, 0x00	; 0
 564:	e6 95       	lsr	r30
 566:	00 1c       	adc	r0, r0
 568:	ca f7       	brpl	.-14     	; 0x55c <__divsf3_pse+0x2c>
 56a:	2b d0       	rcall	.+86     	; 0x5c2 <__divsf3_pse+0x92>
 56c:	fe 2f       	mov	r31, r30
 56e:	29 d0       	rcall	.+82     	; 0x5c2 <__divsf3_pse+0x92>
 570:	66 0f       	add	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	bb 1f       	adc	r27, r27
 578:	26 17       	cp	r18, r22
 57a:	37 07       	cpc	r19, r23
 57c:	48 07       	cpc	r20, r24
 57e:	ab 07       	cpc	r26, r27
 580:	b0 e8       	ldi	r27, 0x80	; 128
 582:	09 f0       	breq	.+2      	; 0x586 <__divsf3_pse+0x56>
 584:	bb 0b       	sbc	r27, r27
 586:	80 2d       	mov	r24, r0
 588:	bf 01       	movw	r22, r30
 58a:	ff 27       	eor	r31, r31
 58c:	93 58       	subi	r25, 0x83	; 131
 58e:	5f 4f       	sbci	r21, 0xFF	; 255
 590:	3a f0       	brmi	.+14     	; 0x5a0 <__divsf3_pse+0x70>
 592:	9e 3f       	cpi	r25, 0xFE	; 254
 594:	51 05       	cpc	r21, r1
 596:	78 f0       	brcs	.+30     	; 0x5b6 <__divsf3_pse+0x86>
 598:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_inf>
 59c:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_szero>
 5a0:	5f 3f       	cpi	r21, 0xFF	; 255
 5a2:	e4 f3       	brlt	.-8      	; 0x59c <__divsf3_pse+0x6c>
 5a4:	98 3e       	cpi	r25, 0xE8	; 232
 5a6:	d4 f3       	brlt	.-12     	; 0x59c <__divsf3_pse+0x6c>
 5a8:	86 95       	lsr	r24
 5aa:	77 95       	ror	r23
 5ac:	67 95       	ror	r22
 5ae:	b7 95       	ror	r27
 5b0:	f7 95       	ror	r31
 5b2:	9f 5f       	subi	r25, 0xFF	; 255
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__divsf3_pse+0x78>
 5b6:	88 0f       	add	r24, r24
 5b8:	91 1d       	adc	r25, r1
 5ba:	96 95       	lsr	r25
 5bc:	87 95       	ror	r24
 5be:	97 f9       	bld	r25, 7
 5c0:	08 95       	ret
 5c2:	e1 e0       	ldi	r30, 0x01	; 1
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	bb 1f       	adc	r27, r27
 5cc:	62 17       	cp	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	ba 07       	cpc	r27, r26
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__divsf3_pse+0xae>
 5d6:	62 1b       	sub	r22, r18
 5d8:	73 0b       	sbc	r23, r19
 5da:	84 0b       	sbc	r24, r20
 5dc:	ba 0b       	sbc	r27, r26
 5de:	ee 1f       	adc	r30, r30
 5e0:	88 f7       	brcc	.-30     	; 0x5c4 <__divsf3_pse+0x94>
 5e2:	e0 95       	com	r30
 5e4:	08 95       	ret

000005e6 <__fixunssfsi>:
 5e6:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_splitA>
 5ea:	88 f0       	brcs	.+34     	; 0x60e <__fixunssfsi+0x28>
 5ec:	9f 57       	subi	r25, 0x7F	; 127
 5ee:	98 f0       	brcs	.+38     	; 0x616 <__fixunssfsi+0x30>
 5f0:	b9 2f       	mov	r27, r25
 5f2:	99 27       	eor	r25, r25
 5f4:	b7 51       	subi	r27, 0x17	; 23
 5f6:	b0 f0       	brcs	.+44     	; 0x624 <__fixunssfsi+0x3e>
 5f8:	e1 f0       	breq	.+56     	; 0x632 <__fixunssfsi+0x4c>
 5fa:	66 0f       	add	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	1a f0       	brmi	.+6      	; 0x60a <__fixunssfsi+0x24>
 604:	ba 95       	dec	r27
 606:	c9 f7       	brne	.-14     	; 0x5fa <__fixunssfsi+0x14>
 608:	14 c0       	rjmp	.+40     	; 0x632 <__fixunssfsi+0x4c>
 60a:	b1 30       	cpi	r27, 0x01	; 1
 60c:	91 f0       	breq	.+36     	; 0x632 <__fixunssfsi+0x4c>
 60e:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_zero>
 612:	b1 e0       	ldi	r27, 0x01	; 1
 614:	08 95       	ret
 616:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_zero>
 61a:	67 2f       	mov	r22, r23
 61c:	78 2f       	mov	r23, r24
 61e:	88 27       	eor	r24, r24
 620:	b8 5f       	subi	r27, 0xF8	; 248
 622:	39 f0       	breq	.+14     	; 0x632 <__fixunssfsi+0x4c>
 624:	b9 3f       	cpi	r27, 0xF9	; 249
 626:	cc f3       	brlt	.-14     	; 0x61a <__fixunssfsi+0x34>
 628:	86 95       	lsr	r24
 62a:	77 95       	ror	r23
 62c:	67 95       	ror	r22
 62e:	b3 95       	inc	r27
 630:	d9 f7       	brne	.-10     	; 0x628 <__fixunssfsi+0x42>
 632:	3e f4       	brtc	.+14     	; 0x642 <__fixunssfsi+0x5c>
 634:	90 95       	com	r25
 636:	80 95       	com	r24
 638:	70 95       	com	r23
 63a:	61 95       	neg	r22
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	8f 4f       	sbci	r24, 0xFF	; 255
 640:	9f 4f       	sbci	r25, 0xFF	; 255
 642:	08 95       	ret

00000644 <__floatunsisf>:
 644:	e8 94       	clt
 646:	09 c0       	rjmp	.+18     	; 0x65a <__floatsisf+0x12>

00000648 <__floatsisf>:
 648:	97 fb       	bst	r25, 7
 64a:	3e f4       	brtc	.+14     	; 0x65a <__floatsisf+0x12>
 64c:	90 95       	com	r25
 64e:	80 95       	com	r24
 650:	70 95       	com	r23
 652:	61 95       	neg	r22
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	8f 4f       	sbci	r24, 0xFF	; 255
 658:	9f 4f       	sbci	r25, 0xFF	; 255
 65a:	99 23       	and	r25, r25
 65c:	a9 f0       	breq	.+42     	; 0x688 <__floatsisf+0x40>
 65e:	f9 2f       	mov	r31, r25
 660:	96 e9       	ldi	r25, 0x96	; 150
 662:	bb 27       	eor	r27, r27
 664:	93 95       	inc	r25
 666:	f6 95       	lsr	r31
 668:	87 95       	ror	r24
 66a:	77 95       	ror	r23
 66c:	67 95       	ror	r22
 66e:	b7 95       	ror	r27
 670:	f1 11       	cpse	r31, r1
 672:	f8 cf       	rjmp	.-16     	; 0x664 <__floatsisf+0x1c>
 674:	fa f4       	brpl	.+62     	; 0x6b4 <__floatsisf+0x6c>
 676:	bb 0f       	add	r27, r27
 678:	11 f4       	brne	.+4      	; 0x67e <__floatsisf+0x36>
 67a:	60 ff       	sbrs	r22, 0
 67c:	1b c0       	rjmp	.+54     	; 0x6b4 <__floatsisf+0x6c>
 67e:	6f 5f       	subi	r22, 0xFF	; 255
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	16 c0       	rjmp	.+44     	; 0x6b4 <__floatsisf+0x6c>
 688:	88 23       	and	r24, r24
 68a:	11 f0       	breq	.+4      	; 0x690 <__floatsisf+0x48>
 68c:	96 e9       	ldi	r25, 0x96	; 150
 68e:	11 c0       	rjmp	.+34     	; 0x6b2 <__floatsisf+0x6a>
 690:	77 23       	and	r23, r23
 692:	21 f0       	breq	.+8      	; 0x69c <__floatsisf+0x54>
 694:	9e e8       	ldi	r25, 0x8E	; 142
 696:	87 2f       	mov	r24, r23
 698:	76 2f       	mov	r23, r22
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <__floatsisf+0x5e>
 69c:	66 23       	and	r22, r22
 69e:	71 f0       	breq	.+28     	; 0x6bc <__floatsisf+0x74>
 6a0:	96 e8       	ldi	r25, 0x86	; 134
 6a2:	86 2f       	mov	r24, r22
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	2a f0       	brmi	.+10     	; 0x6b4 <__floatsisf+0x6c>
 6aa:	9a 95       	dec	r25
 6ac:	66 0f       	add	r22, r22
 6ae:	77 1f       	adc	r23, r23
 6b0:	88 1f       	adc	r24, r24
 6b2:	da f7       	brpl	.-10     	; 0x6aa <__floatsisf+0x62>
 6b4:	88 0f       	add	r24, r24
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret

000006be <__fp_inf>:
 6be:	97 f9       	bld	r25, 7
 6c0:	9f 67       	ori	r25, 0x7F	; 127
 6c2:	80 e8       	ldi	r24, 0x80	; 128
 6c4:	70 e0       	ldi	r23, 0x00	; 0
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	08 95       	ret

000006ca <__fp_nan>:
 6ca:	9f ef       	ldi	r25, 0xFF	; 255
 6cc:	80 ec       	ldi	r24, 0xC0	; 192
 6ce:	08 95       	ret

000006d0 <__fp_pscA>:
 6d0:	00 24       	eor	r0, r0
 6d2:	0a 94       	dec	r0
 6d4:	16 16       	cp	r1, r22
 6d6:	17 06       	cpc	r1, r23
 6d8:	18 06       	cpc	r1, r24
 6da:	09 06       	cpc	r0, r25
 6dc:	08 95       	ret

000006de <__fp_pscB>:
 6de:	00 24       	eor	r0, r0
 6e0:	0a 94       	dec	r0
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	14 06       	cpc	r1, r20
 6e8:	05 06       	cpc	r0, r21
 6ea:	08 95       	ret

000006ec <__fp_round>:
 6ec:	09 2e       	mov	r0, r25
 6ee:	03 94       	inc	r0
 6f0:	00 0c       	add	r0, r0
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <__fp_round+0xc>
 6f4:	88 23       	and	r24, r24
 6f6:	52 f0       	brmi	.+20     	; 0x70c <__fp_round+0x20>
 6f8:	bb 0f       	add	r27, r27
 6fa:	40 f4       	brcc	.+16     	; 0x70c <__fp_round+0x20>
 6fc:	bf 2b       	or	r27, r31
 6fe:	11 f4       	brne	.+4      	; 0x704 <__fp_round+0x18>
 700:	60 ff       	sbrs	r22, 0
 702:	04 c0       	rjmp	.+8      	; 0x70c <__fp_round+0x20>
 704:	6f 5f       	subi	r22, 0xFF	; 255
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	8f 4f       	sbci	r24, 0xFF	; 255
 70a:	9f 4f       	sbci	r25, 0xFF	; 255
 70c:	08 95       	ret

0000070e <__fp_split3>:
 70e:	57 fd       	sbrc	r21, 7
 710:	90 58       	subi	r25, 0x80	; 128
 712:	44 0f       	add	r20, r20
 714:	55 1f       	adc	r21, r21
 716:	59 f0       	breq	.+22     	; 0x72e <__fp_splitA+0x10>
 718:	5f 3f       	cpi	r21, 0xFF	; 255
 71a:	71 f0       	breq	.+28     	; 0x738 <__fp_splitA+0x1a>
 71c:	47 95       	ror	r20

0000071e <__fp_splitA>:
 71e:	88 0f       	add	r24, r24
 720:	97 fb       	bst	r25, 7
 722:	99 1f       	adc	r25, r25
 724:	61 f0       	breq	.+24     	; 0x73e <__fp_splitA+0x20>
 726:	9f 3f       	cpi	r25, 0xFF	; 255
 728:	79 f0       	breq	.+30     	; 0x748 <__fp_splitA+0x2a>
 72a:	87 95       	ror	r24
 72c:	08 95       	ret
 72e:	12 16       	cp	r1, r18
 730:	13 06       	cpc	r1, r19
 732:	14 06       	cpc	r1, r20
 734:	55 1f       	adc	r21, r21
 736:	f2 cf       	rjmp	.-28     	; 0x71c <__fp_split3+0xe>
 738:	46 95       	lsr	r20
 73a:	f1 df       	rcall	.-30     	; 0x71e <__fp_splitA>
 73c:	08 c0       	rjmp	.+16     	; 0x74e <__fp_splitA+0x30>
 73e:	16 16       	cp	r1, r22
 740:	17 06       	cpc	r1, r23
 742:	18 06       	cpc	r1, r24
 744:	99 1f       	adc	r25, r25
 746:	f1 cf       	rjmp	.-30     	; 0x72a <__fp_splitA+0xc>
 748:	86 95       	lsr	r24
 74a:	71 05       	cpc	r23, r1
 74c:	61 05       	cpc	r22, r1
 74e:	08 94       	sec
 750:	08 95       	ret

00000752 <__fp_zero>:
 752:	e8 94       	clt

00000754 <__fp_szero>:
 754:	bb 27       	eor	r27, r27
 756:	66 27       	eor	r22, r22
 758:	77 27       	eor	r23, r23
 75a:	cb 01       	movw	r24, r22
 75c:	97 f9       	bld	r25, 7
 75e:	08 95       	ret

00000760 <__mulsf3>:
 760:	0e 94 c3 03 	call	0x786	; 0x786 <__mulsf3x>
 764:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_round>
 768:	0e 94 68 03 	call	0x6d0	; 0x6d0 <__fp_pscA>
 76c:	38 f0       	brcs	.+14     	; 0x77c <__mulsf3+0x1c>
 76e:	0e 94 6f 03 	call	0x6de	; 0x6de <__fp_pscB>
 772:	20 f0       	brcs	.+8      	; 0x77c <__mulsf3+0x1c>
 774:	95 23       	and	r25, r21
 776:	11 f0       	breq	.+4      	; 0x77c <__mulsf3+0x1c>
 778:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_inf>
 77c:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__fp_nan>
 780:	11 24       	eor	r1, r1
 782:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_szero>

00000786 <__mulsf3x>:
 786:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_split3>
 78a:	70 f3       	brcs	.-36     	; 0x768 <__mulsf3+0x8>

0000078c <__mulsf3_pse>:
 78c:	95 9f       	mul	r25, r21
 78e:	c1 f3       	breq	.-16     	; 0x780 <__mulsf3+0x20>
 790:	95 0f       	add	r25, r21
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	55 1f       	adc	r21, r21
 796:	62 9f       	mul	r22, r18
 798:	f0 01       	movw	r30, r0
 79a:	72 9f       	mul	r23, r18
 79c:	bb 27       	eor	r27, r27
 79e:	f0 0d       	add	r31, r0
 7a0:	b1 1d       	adc	r27, r1
 7a2:	63 9f       	mul	r22, r19
 7a4:	aa 27       	eor	r26, r26
 7a6:	f0 0d       	add	r31, r0
 7a8:	b1 1d       	adc	r27, r1
 7aa:	aa 1f       	adc	r26, r26
 7ac:	64 9f       	mul	r22, r20
 7ae:	66 27       	eor	r22, r22
 7b0:	b0 0d       	add	r27, r0
 7b2:	a1 1d       	adc	r26, r1
 7b4:	66 1f       	adc	r22, r22
 7b6:	82 9f       	mul	r24, r18
 7b8:	22 27       	eor	r18, r18
 7ba:	b0 0d       	add	r27, r0
 7bc:	a1 1d       	adc	r26, r1
 7be:	62 1f       	adc	r22, r18
 7c0:	73 9f       	mul	r23, r19
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	62 1f       	adc	r22, r18
 7c8:	83 9f       	mul	r24, r19
 7ca:	a0 0d       	add	r26, r0
 7cc:	61 1d       	adc	r22, r1
 7ce:	22 1f       	adc	r18, r18
 7d0:	74 9f       	mul	r23, r20
 7d2:	33 27       	eor	r19, r19
 7d4:	a0 0d       	add	r26, r0
 7d6:	61 1d       	adc	r22, r1
 7d8:	23 1f       	adc	r18, r19
 7da:	84 9f       	mul	r24, r20
 7dc:	60 0d       	add	r22, r0
 7de:	21 1d       	adc	r18, r1
 7e0:	82 2f       	mov	r24, r18
 7e2:	76 2f       	mov	r23, r22
 7e4:	6a 2f       	mov	r22, r26
 7e6:	11 24       	eor	r1, r1
 7e8:	9f 57       	subi	r25, 0x7F	; 127
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	9a f0       	brmi	.+38     	; 0x814 <__mulsf3_pse+0x88>
 7ee:	f1 f0       	breq	.+60     	; 0x82c <__mulsf3_pse+0xa0>
 7f0:	88 23       	and	r24, r24
 7f2:	4a f0       	brmi	.+18     	; 0x806 <__mulsf3_pse+0x7a>
 7f4:	ee 0f       	add	r30, r30
 7f6:	ff 1f       	adc	r31, r31
 7f8:	bb 1f       	adc	r27, r27
 7fa:	66 1f       	adc	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	91 50       	subi	r25, 0x01	; 1
 802:	50 40       	sbci	r21, 0x00	; 0
 804:	a9 f7       	brne	.-22     	; 0x7f0 <__mulsf3_pse+0x64>
 806:	9e 3f       	cpi	r25, 0xFE	; 254
 808:	51 05       	cpc	r21, r1
 80a:	80 f0       	brcs	.+32     	; 0x82c <__mulsf3_pse+0xa0>
 80c:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__fp_inf>
 810:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_szero>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	e4 f3       	brlt	.-8      	; 0x810 <__mulsf3_pse+0x84>
 818:	98 3e       	cpi	r25, 0xE8	; 232
 81a:	d4 f3       	brlt	.-12     	; 0x810 <__mulsf3_pse+0x84>
 81c:	86 95       	lsr	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	f7 95       	ror	r31
 826:	e7 95       	ror	r30
 828:	9f 5f       	subi	r25, 0xFF	; 255
 82a:	c1 f7       	brne	.-16     	; 0x81c <__mulsf3_pse+0x90>
 82c:	fe 2b       	or	r31, r30
 82e:	88 0f       	add	r24, r24
 830:	91 1d       	adc	r25, r1
 832:	96 95       	lsr	r25
 834:	87 95       	ror	r24
 836:	97 f9       	bld	r25, 7
 838:	08 95       	ret

0000083a <__udivmodhi4>:
 83a:	aa 1b       	sub	r26, r26
 83c:	bb 1b       	sub	r27, r27
 83e:	51 e1       	ldi	r21, 0x11	; 17
 840:	07 c0       	rjmp	.+14     	; 0x850 <__udivmodhi4_ep>

00000842 <__udivmodhi4_loop>:
 842:	aa 1f       	adc	r26, r26
 844:	bb 1f       	adc	r27, r27
 846:	a6 17       	cp	r26, r22
 848:	b7 07       	cpc	r27, r23
 84a:	10 f0       	brcs	.+4      	; 0x850 <__udivmodhi4_ep>
 84c:	a6 1b       	sub	r26, r22
 84e:	b7 0b       	sbc	r27, r23

00000850 <__udivmodhi4_ep>:
 850:	88 1f       	adc	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	5a 95       	dec	r21
 856:	a9 f7       	brne	.-22     	; 0x842 <__udivmodhi4_loop>
 858:	80 95       	com	r24
 85a:	90 95       	com	r25
 85c:	bc 01       	movw	r22, r24
 85e:	cd 01       	movw	r24, r26
 860:	08 95       	ret

00000862 <_exit>:
 862:	f8 94       	cli

00000864 <__stop_program>:
 864:	ff cf       	rjmp	.-2      	; 0x864 <__stop_program>
